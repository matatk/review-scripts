#!/bin/sh
. review.config.sh

first_run=false
hash=''

help() {
	script=$(basename "$0")
	echo "$script: retrieve the next commit and start reviewing it"
	echo
	echo "Usage: $script [-c <hash>] [-h] [txt|web]"
	echo
	echo "Options:"
	echo "    -c <hash>    act upon given commit hash; not next/current"
	echo "    -h           show this help message"
	echo
	echo "Optional subcommands:"
	echo "    txt    review with 'git show'"
	echo "    web    review on the web"
	echo
	echo "Specifying no subcommand will cause only the commit's short"
	echo "hash and summary to be shown."
	echo
	echo "The next commit is retrieved from the beginning of the todo"
	echo "file, attempting to preserve chronological order."
}

mini_help() {
	echo "Pass 'txt' or 'web' to examine the commit as soon as it's retrieved."
	echo "Use -h for more information."
}

get_next_commit() {
	temp_file="$FILE_COMMITS_TO_REVIEW.temp"

	if [ ! -r "$FILE_COMMIT_IN_REVIEW" ]; then
		if [ -r "$temp_file" ]; then
			echo "There's already a file called $temp_file - aborting"
			exit 42
		fi
		if [ ! -r "$FILE_COMMITS_TO_REVIEW" ]; then
			echo "No commits to review - aborting"
			exit 42
		fi

		head -n 1 $FILE_COMMITS_TO_REVIEW > $FILE_COMMIT_IN_REVIEW
		tail -n +2 $FILE_COMMITS_TO_REVIEW > $temp_file \
			&& mv $temp_file $FILE_COMMITS_TO_REVIEW

		if [ "$(du $FILE_COMMITS_TO_REVIEW | cut -f1)" = '0' ]; then
			rm $FILE_COMMITS_TO_REVIEW
		fi

		echo "Next commit to review:"
		first_run=true
	else
		echo "Commit in review:"
	fi

	hash=$(cut -d ' ' -f 1 < $FILE_COMMIT_IN_REVIEW)
}

# Repeated in review.channel
count_remaining_commits() {
	list=$1
	message=$2
	echo "$(wc -l < "$list" | tr -d '[:space:]') $message"
}

show_current_commit() {
	cat $FILE_COMMIT_IN_REVIEW
}

show_cli_commit() {
	git log -1 --oneline "$hash"
}

show_num_left() {
	if [ -r $FILE_COMMITS_TO_REVIEW ]; then
		count_remaining_commits $FILE_COMMITS_TO_REVIEW 'left to review'
	else
		echo "No more commits to review"
	fi
	if [ -r $FILE_COMMITS_PARKED ]; then
		count_remaining_commits $FILE_COMMITS_PARKED 'parked'
	fi
}

get_and_show_commit_info() {
	if [ -z "$hash" ]; then
		get_next_commit
		show_current_commit
	else
		show_cli_commit
	fi
	show_num_left
}

main() {
	while getopts 'c:h' o; do
		case $o in
			c) hash=$OPTARG ;;
			h|*) help; exit 0
		esac
	done

	shift $((OPTIND-1))

	case "$1" in
		'txt')
			get_and_show_commit_info
			git show "$hash"
			;;
		'web')
			get_and_show_commit_info
			open "$URL_COMMIT_START/$hash"
			;;
		*)
			get_and_show_commit_info
			if $first_run; then
				mini_help
			fi
	esac
}

main "$@"
